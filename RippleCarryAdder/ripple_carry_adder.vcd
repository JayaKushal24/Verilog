$date
	Wed Oct 30 15:51:02 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ripple_carry_adder_tb $end
$var wire 4 ! sum [3:0] $end
$var wire 1 " carry $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$var reg 1 % cin $end
$scope module rca $end
$var wire 4 & a [3:0] $end
$var wire 4 ' b [3:0] $end
$var wire 1 % cin $end
$var wire 4 ( sum [3:0] $end
$var wire 1 " carry $end
$var wire 1 ) c3 $end
$var wire 1 * c2 $end
$var wire 1 + c1 $end
$scope module fa0 $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 + carry $end
$var wire 1 % cin $end
$var wire 1 . sum $end
$var wire 1 / s $end
$var wire 1 0 c2 $end
$var wire 1 1 c1 $end
$scope module ha0 $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 1 carry $end
$var wire 1 / sum $end
$upscope $end
$scope module ha1 $end
$var wire 1 % a $end
$var wire 1 / b $end
$var wire 1 0 carry $end
$var wire 1 . sum $end
$upscope $end
$upscope $end
$scope module fa1 $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 * carry $end
$var wire 1 + cin $end
$var wire 1 4 sum $end
$var wire 1 5 s $end
$var wire 1 6 c2 $end
$var wire 1 7 c1 $end
$scope module ha0 $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 7 carry $end
$var wire 1 5 sum $end
$upscope $end
$scope module ha1 $end
$var wire 1 + a $end
$var wire 1 5 b $end
$var wire 1 6 carry $end
$var wire 1 4 sum $end
$upscope $end
$upscope $end
$scope module fa2 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 ) carry $end
$var wire 1 * cin $end
$var wire 1 : sum $end
$var wire 1 ; s $end
$var wire 1 < c2 $end
$var wire 1 = c1 $end
$scope module ha0 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 = carry $end
$var wire 1 ; sum $end
$upscope $end
$scope module ha1 $end
$var wire 1 * a $end
$var wire 1 ; b $end
$var wire 1 < carry $end
$var wire 1 : sum $end
$upscope $end
$upscope $end
$scope module fa3 $end
$var wire 1 > a $end
$var wire 1 ? b $end
$var wire 1 " carry $end
$var wire 1 ) cin $end
$var wire 1 @ sum $end
$var wire 1 A s $end
$var wire 1 B c2 $end
$var wire 1 C c1 $end
$scope module ha0 $end
$var wire 1 > a $end
$var wire 1 ? b $end
$var wire 1 C carry $end
$var wire 1 A sum $end
$upscope $end
$scope module ha1 $end
$var wire 1 ) a $end
$var wire 1 A b $end
$var wire 1 B carry $end
$var wire 1 @ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
b0 (
b0 '
b0 &
0%
b0 $
b0 #
0"
b0 !
$end
#10
14
b110 !
b110 (
1:
1"
15
1;
1C
13
1?
18
1>
b1010 $
b1010 '
b1100 #
b1100 &
#20
1@
1)
0:
1<
1*
b1000 !
b1000 (
04
16
1+
0"
11
0C
1-
0?
1,
0>
b11 $
b11 '
b101 #
b101 &
#30
1:
0<
b1110 !
b1110 (
14
06
1"
0;
1=
05
17
1C
19
1?
12
1>
b1111 $
b1111 '
b1111 #
b1111 &
#40
0@
1B
10
1+
1"
04
16
1*
0:
1<
1)
1/
01
1A
0C
15
07
1;
0=
b0 !
b0 (
0.
0-
0?
02
08
1%
b110 $
b110 '
b1001 #
b1001 &
#50
